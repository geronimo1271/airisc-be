"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.paginateGraphQlResults = exports.paginateRestResults = void 0;
const parsePaginationArgs = ({ page: pageQuery = '1', pageSize: pageSizeQuery = '25', withCount: withCountQuery = 'true', }) => {
    const page = parseInt(pageQuery, 10);
    const pageSize = parseInt(pageSizeQuery, 10);
    const withCount = withCountQuery === 'true';
    return { page, pageSize, withCount };
};
const paginateRestResults = async (pagination, pluralNames, resultsResponse) => {
    const currentResult = { ...resultsResponse };
    const paginatedResult = {};
    const buildPaginatedResults = (pluralName) => {
        const { page, pageSize, withCount } = parsePaginationArgs(pagination[pluralName]);
        paginatedResult[pluralName] = {
            data: [],
            meta: { pagination: { page: 1, pageSize: 25 } },
        };
        const startIndex = pageSize * (page - 1);
        const endIndex = startIndex + pageSize;
        paginatedResult[pluralName].data = currentResult[pluralName].slice(startIndex, endIndex);
        const meta = {
            pagination: {
                page,
                pageSize,
            },
        };
        if (withCount) {
            const total = resultsResponse[pluralName].length;
            meta.pagination.total = total;
            meta.pagination.pageCount = Math.ceil(total / pageSize);
        }
        paginatedResult[pluralName].meta = meta;
    };
    pluralNames.forEach((pluralName) => {
        if (!pagination[pluralName])
            return;
        buildPaginatedResults(pluralName);
    });
    return { ...resultsResponse, ...paginatedResult };
};
exports.paginateRestResults = paginateRestResults;
const paginateGraphQlResults = (results, { limit, start }) => {
    const resultsCopy = [...results];
    const data = resultsCopy.slice(start, start + limit);
    // Strapi only accepts start and limit at meta args
    // and calculates values in toEntityResponseCollection() util
    const meta = {
        start,
        limit,
    };
    return { data, meta };
};
exports.paginateGraphQlResults = paginateGraphQlResults;
