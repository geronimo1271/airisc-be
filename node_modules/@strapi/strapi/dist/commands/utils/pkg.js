"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePkg = exports.loadPkg = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const os_1 = __importDefault(require("os"));
const pkg_up_1 = __importDefault(require("pkg-up"));
const yup = __importStar(require("yup"));
const chalk_1 = __importDefault(require("chalk"));
const packageJsonSchema = yup.object({
    exports: yup.lazy((value) => yup
        .object(typeof value === 'object'
        ? Object.entries(value).reduce((acc, [key, value]) => {
            if (typeof value === 'object') {
                acc[key] = yup
                    .object({
                    types: yup.string().optional(),
                    source: yup.string().required(),
                    module: yup.string().optional(),
                    import: yup.string().required(),
                    require: yup.string().required(),
                    default: yup.string().required(),
                })
                    .noUnknown(true);
            }
            else {
                acc[key] = yup
                    .string()
                    .matches(/^\.\/.*\.json$/)
                    .required();
            }
            return acc;
        }, {})
        : undefined)
        .optional()),
});
/**
 * @description being a task to load the package.json starting from the current working directory
 * using a shallow find for the package.json  and `fs` to read the file. If no package.json is found,
 * the process will throw with an appropriate error message.
 */
const loadPkg = async ({ cwd, logger }) => {
    const pkgPath = await (0, pkg_up_1.default)({ cwd });
    if (!pkgPath) {
        throw new Error('Could not find a package.json in the current directory');
    }
    const buffer = await promises_1.default.readFile(pkgPath);
    const pkg = JSON.parse(buffer.toString());
    logger.debug('Loaded package.json:', os_1.default.EOL, pkg);
    return pkg;
};
exports.loadPkg = loadPkg;
/**
 * @description validate the package.json against a standardised schema using `yup`.
 * If the validation fails, the process will throw with an appropriate error message.
 */
const validatePkg = async ({ pkg }) => {
    try {
        const validatedPkg = await packageJsonSchema.validate(pkg, {
            strict: true,
        });
        return validatedPkg;
    }
    catch (err) {
        if (err instanceof yup.ValidationError) {
            switch (err.type) {
                case 'required':
                    if (err.path) {
                        throw new Error(`'${err.path}' in 'package.json' is required as type '${chalk_1.default.magenta(yup.reach(packageJsonSchema, err.path).type)}'`);
                    }
                    break;
                /**
                 * This will only be thrown if there are keys in the export map
                 * that we don't expect so we can therefore make some assumptions
                 */
                case 'noUnknown':
                    if (err.path && err.params && 'unknown' in err.params) {
                        throw new Error(`'${err.path}' in 'package.json' contains the unknown key ${chalk_1.default.magenta(err.params.unknown)}, for compatability only the following keys are allowed: ${chalk_1.default.magenta("['types', 'source', 'import', 'require', 'default']")}`);
                    }
                    break;
                default:
                    if (err.path && err.params && 'type' in err.params && 'value' in err.params) {
                        throw new Error(`'${err.path}' in 'package.json' must be of type '${chalk_1.default.magenta(err.params.type)}' (recieved '${chalk_1.default.magenta(typeof err.params.value)}')`);
                    }
            }
        }
        throw err;
    }
};
exports.validatePkg = validatePkg;
//# sourceMappingURL=pkg.js.map